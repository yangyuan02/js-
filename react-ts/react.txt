1.  class 组件与函数式组件的区别区别

2.react 组件优化

3 为什么 redux 需要 reducers 是纯函数

4.this.setData()什么时候是同步什么时候异步

5.React 中 keys 的作用是什么
    Keys 是 React 用于追踪哪些列表中元素被修改、被添加或者被移除的辅助标识。

6.react 生命周期函数
    初始化阶段：
        getDefaultProps:获取实例的默认属性
        getInitialState:获取每个实例的初始化状态
        componentWillMount：组件即将被装载、渲染到页面上
        render:组件在这里生成虚拟的 DOM 节点
        componentDidMount:组件真正在被装载之后
    运行中状态：
        componentWillReceiveProps:组件将要接收到属性的时候调用
        shouldComponentUpdate:组件接受到新属性或者新状态的时候（可以返回 false，接收数据后不更新，阻止 render 调用，后面的函数不会被继续执行了）
        componentWillUpdate:组件即将更新不能修改属性和状态
        render:组件重新描绘
        componentDidUpdate:组件已经更新
    销毁阶段：
        componentWillUnmount:组件即将销毁

    shouldComponentUpdate是做什么
        shouldComponentUpdate 这个方法用来判断是否需要调用 render 方法重新描绘 dom。因为 dom 的描绘非常消耗性能，
        如果我们能在 shouldComponentUpdate 方法中能够写出更优化的 dom diff 算法，可以极大的提高性能。

7.react diff 原理（常考，大厂必考）
    把树形结构按照层级分解，只比较同级元素。
    给列表结构的每个单元添加唯一的 key 属性，方便比较。
    React 只会匹配相同 class 的 component（这里面的 class 指的是组件的名字）
    合并操作，调用 component 的 setState 方法的时候, React 将其标记为 dirty.
    到每一个事件循环结束, React 检查所有标记 dirty 的 component 重新绘制.
    选择性子树渲染。开发人员可以重写 shouldComponentUpdate 提高 diff 的性能。

8.React 中 refs 的作用是什么？
    Refs 是 React 提供给我们的安全访问 DOM 元素或者某个组件实例的句柄。我们可以为元素添加 ref 
    属性然后在回调函数中接受该元素在 DOM 树中的句柄，该值会作为回调函数的第一个参数返回
        class CustomForm extends Component {
            handleSubmit = () => {
                console.log("Input Value: ", this.input.value)
            }
            render () {
                return (
                <form onSubmit={this.handleSubmit}>
                    <input
                    type='text'
                    ref={(input) => this.input = input} />
                    <button type='submit'>Submit</button>
                </form>
                )
            }
        }
    refs 并不是类组件的专属，函数式组件同样能够利用闭包暂存其值
        function CustomForm ({handleSubmit}) {
            let inputElement
            return (
                <form onSubmit={() => handleSubmit(inputElement.value)}>
                <input
                    type='text'
                    ref={(input) => inputElement = input} />
                <button type='submit'>Submit</button>
                </form>
            )
        }

9.展示组件(Presentational component)和容器组件(Container component)之间有何不同
    展示组件
        关心组件看起来是什么。展示专门通过 props 接受数据和回调，并且几乎不会有自身的状态，
        但当展示组件拥有自身的状态时，通常也只关心 UI 状态而不是数据的状态。
    容器组件
        则更关心组件是如何运作的。容器组件会为展示组件或者其它容器组件提供数据和行为(behavior)，
        它们会调用 Flux actions，并将其作为回调提供给展示组件。容器组件经常是有状态的，因为它们是(其它组件的)数据源。

10.类组件(Class component)和函数式组件(Functional component)之间有何不同
    类组件
        不仅允许你使用更多额外的功能，如组件自身的状态和生命周期钩子，也能使组件直接访问 store 并维持状态
    函数式组件(无状态组件)
        当组件仅是接收 props，并将组件自身渲染到页面时，该组件就是一个 '无状态组件(stateless component)'，
        可以使用一个纯函数来创建这样的组件。这种组件也被称为哑组件(dumb components)或展示组件
        
    函数组件和类组件当然是有区别的，而且函数组件的性能比类组件的性能要高，因为类组件使用的时候要实例化，
    而函数组件直接执行函数取返回结果即可。为了提高性能，尽量使用函数组件

11.(组件的)状态(state)和属性(props)之间有何不同
    State
        是一种数据结构，用于组件挂载时所需数据的默认值。State 可能会随着时间的推移而发生突变，但多数时候是作为
        用户事件行为的结果。
    Props
        (properties 的简写)则是组件的配置。props 由父组件传递给子组件，并且就子组件而言，props 是不可变的(immutable)
        。组件不能改变自身的 props，但是可以把其子组件的 props 放在一起(统一管理)。Props 也不仅仅是数据--回调函数也可以通过 
        props 传递。

12.何为受控组件(controlled component)
    在 HTML 中，类似 <input>, <textarea> 和 <select> 这样的表单元素会维护自身的状态，并基于用户的输入来更新。当用户提交表单时，
    前面提到的元素的值将随表单一起被发送。但在 React 中会有些不同，包含表单元素的组件将会在 state 中追踪输入的值，并且每次调用回调函数时，
    如 onChange 会更新 state，重新渲染组件。一个输入表单元素，它的值通过 React 的这种方式来控制，这样的元素就被称为"受控元素"。

13何为高阶组件(higher order component)
    高阶组件是一个以组件为参数并返回一个新组件的函数。HOC 运行你重用代码、逻辑和引导抽象。最常见的可能是 Redux 的 connect 函数。除了简单分享工具库和简单的组合，
    HOC 最好的方式是共享 React 组件之间的行为。如果你发现你在不同的地方写了大量代码来做同一件事时，就应该考虑将代码重构为可重用的 HOC。

14为什么建议传递给 setState 的参数是一个 callback 而不是一个对象
    因为 this.props 和 this.state 的更新可能是异步的，不能依赖它们的值去计算下一个 state。

15(在构造函数中)调用 super(props) 的目的是什么
    在 super() 被调用之前，子类是不能使用 this 的，在 ES2015 中，子类必须在 constructor 中调用 super()。
    传递 props 给 super() 的原因则是便于(在子类中)能在 constructor 访问 this.props。

16应该在 React 组件的何处发起 Ajax 请求
    在 React 组件中，应该在 componentDidMount 中发起网络请求。这个方法会在组件第一次“挂载”(被添加到 DOM)时执行，
    在组件的生命周期中仅会执行一次。更重要的是，你不能保证在组件挂载之前 Ajax 请求已经完成，如果是这样，也就意味着你
    将尝试在一个未挂载的组件上调用 setState，这将不起作用。在 componentDidMount 中发起网络请求将保证这有一个组件可以更新了。

17.描述事件在 React 中的处理方式。
    为了解决跨浏览器兼容性问题，您的 React 中的事件处理程序将传递 SyntheticEvent 的实例，它是 React 的浏览器本机事件的跨浏览器包装器。
    这些 SyntheticEvent 与您习惯的原生事件具有相同的接口，除了它们在所有浏览器中都兼容。有趣的是，React 实际上并没有将事件附加到子节点本身。
    React 将使用单个事件监听器监听顶层的所有事件。这对于性能是有好处的，这也意味着在更新 DOM 时，React 不需要担心跟踪事件监听器。

18.createElement 和 cloneElement 有什么区别？
    React.createElement():JSX 语法就是用 React.createElement()来构建 React 元素的。它接受三个参数，第一个参数可以是一个标签名。
    如 div、span，或者 React 组件。第二个参数为传入的属性。第三个以及之后的参数，皆作为组件的子组件。
    React.cloneElement()与 React.createElement()相似，不同的是它传入的第一个参数是一个 React 元素，而不是标签名或组件。新添加的
    属性会并入原有的属性，传入到返回的新元素中，而就的子元素奖杯替换

19.react 组件的划分业务组件技术组件？
    根据组件的职责通常把组件分为 UI 组件和容器组件。
    UI 组件负责 UI 的呈现，容器组件负责管理数据和逻辑
    两者通过 React-Redux 提供 connect 方法联系起来。

20.了解 redux 么，说一下 redux 把
    redux
        是一个应用数据流框架，主要是解决了组件间状态共享的问题，原理是集中式管理，主要有三个核心方法，action，store，reducer，工作流程是
        view 调用 store 的 dispatch 接收 action 传入 store，reducer 进行 state 操作，view 通过 store 提供的 getState 获取最新的数据，
        flux 也是用来进行数据操作的，有四个组成部分 action，dispatch，view，store，工作流程是 view 发出一个 action，派发器接收 action，
        让 store 进行数据更新，更新完成以后 store 发出 change，view 接受 change 更新视图。Redux 和 Flux 很像。主要区别在于 Flux 
        有多个可以改变应用状态的 store，在 Flux 中 dispatcher 被用来传递数据到注册的回调事件，但是在 redux 中只能定义一个可更新状态的 store，
        redux 把 store 和 Dispatcher 合并,结构更加简单清晰
        新增 state,对状态的管理更加明确，通过 redux，流程更加规范了，减少手动编码量，提高了编码效率，同时缺点时当数据更新时有时候组件不需要，
        但是也要重新绘制，有些影响效率。一般情况下，我们在构建多交互，多数据流的复杂项目应用时才会使用它们

21.redux 有什么缺点
    一个组件所需要的数据，必须由父组件传过来，而不能像 flux 中直接从 store 取。
    当一个组件相关数据更新时，即使父组件不需要用到这个组件，父组件还是会重新 render，可能会有效率影响，或者需要写复杂的 
    shouldComponentUpdate 进行判断。




