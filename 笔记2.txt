面试题目(https://juejin.im/post/5e91b01651882573716a9b23#heading-51)
/*************************************************************************************************/
1.CommonJs.required.amd.cmd,import区别?(https://www.cnblogs.com/sunidol/p/11306283.html)
    模块化的开发方式可以提高代码复用率,通常一个文件就是一个模块,有自己的作用域,只向外暴露特定的变量和函数
        CommonJs是在Node主要实践者,他有四个重要的环境变量为模块化实现技术支持
            module,exports,required,global
        import 是值的引用编译时输出接口
        require是值的拷贝后者运行时加载（在内存中加载过了从缓存中取值）

/*************************************************************************************************/
2.合成层怎么触发，怎么分的
    触发合成层
        具有CSS3D属性或CSS透视效果会触发合成层
        包含的RenderObject节点包含使用了硬件加速的Canvas2D或WebGL技术
        包含的RenderObject节点表示的是使用硬件加速的视频解码技术的HTML5video元素
        使用了CSS透明效果或CSS变形动画
        使用了剪裁Clip或者反射Reflection，并且它的后代中包含一个合成层
/*************************************************************************************************/
3.CSS 定位方式， sticky 的使用场景
    position:static|relative|absolute|fixed|sticky
        sticky:粘性定位
        应用场景:滚动头部固定定位
        使用方式{
            position:sticky;
            top:0
        }
        生效规则,必须制定top,right,bottom,left其中一个阈值,才可以使粘性定位生效

/*************************************************************************************************/
4.script 标签的 async 和 defer 属性
    defer
        如果script标签设置了该属性，则浏览器会异步的下载该文件并且不会影响到后续DOM的渲染；如果有多个设置了defer的
        script标签存在，则会按照顺序执行所有的script；defer脚本会在文档渲染完毕后，DOMContentLoaded事件调用前执行
    async
        async的设置，会使得script脚本异步的加载并在允许的情况下执行async的执行，并不会按着script在页面中的顺序来执行
        ，而是谁先加载完谁执行。

/*************************************************************************************************/
5.向一个 DOM 后面插入节点怎么做

/*************************************************************************************************/
6.浏览器缓存(https://www.cnblogs.com/soyxiaobi/p/9400913.html  https://www.cnblogs.com/iceflorence/p/8905825.html)
    缓存可以说是性能优化中简单高效的一种优化方式了。一个优秀的缓存策略可以缩短网页请求资源的距离，减少延迟，并且由于
    缓存文件可以重复利用，还可以减少带宽，降低网络负荷。
    对于一个数据请求来说，可以分为发起网络请求、后端处理、浏览器响应三个步骤。浏览器缓存可以帮助我们在第一和第三步骤中优化性能。
    比如说直接使用缓存而不发起请求，或者发起了请求但后端存储的数据和前端一致，那么就没有必要再将数据回传回来，这样就减少了响应数据

    实际应用的场景
        频繁变动的资源:cache-control:no-cache
        不常变动的资源:cache-control:max-age=3600*10
    浏览器缓存
        强缓存(不会向服务器发送请求，直接从缓存中读取资源)
            expires http1.0
                指定资源到期时间是服务端的具体时间，修改本地时间会造成缓存失效
            cache-control http1.1
                可以指定多种值
            对比
                cache-control优先级高于expires
        协商缓存(向服务器发送请求，服务器会根据这个请求的request header的一些参数来判断是否命中协商缓存，如果命中，则返回304状态码并带上新的response header通知浏览器从缓存中读取资源)
            Last-Modified/If-Modified-Since 只能以秒计时，有局限性
            ETag/If-None-Match 相应请求时,返回一个唯一标识的ETag,ETag由服务器生成资源有变化他会重新生成
        缓存机制
            强缓存由先于协商缓存进行
            协商缓存失败,返回200,重新返回资源和缓存标识
            协商缓存生效则返回304，继续使用缓存
    缓存位置
        service worker 自由控制缓存那些文件，如何匹配缓存,如何读取缓存,缓存秩序性的  注册，监听，https
        Memory cache 读取高效,缓存秩序短  一旦我们关闭 Tab 页面，内存中的缓存也就被释放了
        Disk cache 读取速度慢
        push cache 只在session中存在
    用户行为影响
        地址栏输入地址
            查找disk cache中是否匹配,没有匹配则发起网络请求
        普通刷新(F5)
            有限使用Memory cache,其次Disk cache
        强制刷新
            ctrl+F5 浏览器不使用缓存
/*************************************************************************************************/
7.ContentType 有哪些，formData 里面是什么结构(https://www.cnblogs.com/xiaozong/p/5732332.html)
    1.application/x-www-form-urlencoded
        POST http://www.example.com HTTP/1.1
        Content-Type: application/x-www-form-urlencoded;charset=uft-8;
        title=测试&sub=12
    
    2.multipart/form-data(一般用户文件上传)
        POST http://www.example.com HTTP/1.1
        Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA
        
        ------WebKitFormBoundaryrGKCBY7qhFd3TrwA
        Content-Disposition: form-data; name="text"
        
        title
        ------WebKitFormBoundaryrGKCBY7qhFd3TrwA
        Content-Disposition: form-data; name="file"; filename="chrome.png"
        Content-Type: image/png
        
        PNG ... content of chrome.png ...
        ------WebKitFormBoundaryrGKCBY7qhFd3TrwA--
    3.application/json
        POST http://www.example.com HTTP/1.1
        Content-Type: application/json;charset=utf-8
        {"title":"test","sub":[1,2,3]}
/*************************************************************************************************/
8.在上家公司遇到了什么问题，怎么解决的，技术和非技术都可以说说

/*************************************************************************************************/
9.base64 是什么
    Base64是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。可查看RFC2045～RFC2049，上面有MIME的详细规范。
    Base64编码是从二进制到字符的过程，可用于在HTTP环境下传递较长的标识信息。采用Base64编码具有不可读性，需要解码后才能阅读
    Base64为什么能提升性能，缺点
        减少了请求,但是文件体积变大了

/*************************************************************************************************/
10.for in 与Object.keys()的区别
    funcition Person(name,age) {
        this.name = name;
        this.age = age;
    }

    Person.prototype = {
        sex:'男'
    }

    var man = new Person('张三', 18);

    console.log(Object.keys(man)) // ['name','age']

    for(var key in man) {
        console.log(key) // name age sex
    }

    Object.keys只会打印构造函数自身的属性
    for in会打印原型上面的属性

/*************************************************************************************************/
11.Promise 有哪些方法，都是做什么的
    Promise.resolve(value)方法返回一个以给定值解析后的Promise 对象
    Promise.reject()方法返回一个带有拒绝原因的Promise对象。
    Promise.all(iterable)
        function promise1 () {
            return new Promise(resolve => {
                console.log('promise1 start');
                setTimeout(() => {
                console.log('promise1 over');
                resolve();
                }, 100);
            })
        }
        function promise2 () {
            return new Promise(resolve => {
                console.log('promise2 start');
                setTimeout(() => {
                console.log('promise2 over');
                resolve();
                }, 90);
            })
        }

        Promise.all([promise1(), promise2()]) // promise1 start -> promise2 start -> promise2 over -> promise1 over
        all()里面接受promise对象,只有里面所有的resolved才会整个结果resolved
        all()是并行执行的,all()获得成功结果数组里面的数据顺序和all()接收到数据顺序是一致的,不会因为相应顺序而改变
    Promise.race(iterable)
        方法返回一个 promise，一旦迭代器中的某个promise解决或拒绝，返回的 promise就会解决或拒绝
        返回值:一个待定的 Promise 只要给定的迭代中的一个promise解决或拒绝，就采用第一个promise的值作为它的值，从而异步地解析或拒绝（一旦堆栈为空
        var p1 = new Promise(function(resolve, reject) { 
            setTimeout(resolve, 500, "one"); 
        });
        var p2 = new Promise(function(resolve, reject) { 
            setTimeout(resolve, 100, "two"); 
        });

        Promise.race([p1, p2]).then(function(value) {
        console.log(value); // "two"
        // 两个都完成，但 p2 更快
        });

        var p3 = new Promise(function(resolve, reject) { 
            setTimeout(resolve, 100, "three");
        });
        var p4 = new Promise(function(resolve, reject) { 
            setTimeout(reject, 500, "four"); 
        });

        Promise.race([p3, p4]).then(function(value) {
        console.log(value); // "three"
        // p3 更快，所以它完成了              
        }, function(reason) {
        // 未被调用
        });

        var p5 = new Promise(function(resolve, reject) { 
            setTimeout(resolve, 500, "five"); 
        });
        var p6 = new Promise(function(resolve, reject) { 
            setTimeout(reject, 100, "six");
        });

        Promise.race([p5, p6]).then(function(value) {
        // 未被调用             
        }, function(reason) {
        console.log(reason); // "six"
        // p6 更快，所以它失败了
        });

/*************************************************************************************************/
12.BFC 的原理和使用场景

/*************************************************************************************************/
13.如何并发执行 async (https://www.cnblogs.com/xbblogs/p/8946912.html)
    function foo() {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                console.log('foo:' + new Date().toLocaleString())
                resolve('foo')
            }, 2000)
        })
    }

    function bar() {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                console.log('bar:' + new Date().toLocaleString())
                resolve('bar')
            }, 2000)
        })
    }
    继发执行
    //继发执行
    async function main() {
        console.log('beginTime:' + new Date().toLocaleString())
        var foostr = await foo();
        console.log(new Date().toLocaleString())
        console.log(foostr);
        var barstr = await bar();
        console.log(new Date().toLocaleString())
        console.log(barstr);
        console.log('endTime:' + new Date().toLocaleString())
    }


    //继发执行
    async function main2() {
        let docs = [foo, bar];
        console.log('beginTime:' + new Date().toLocaleString())
        for (let doc of docs) {
            var str = await doc();
            console.log(new Date().toLocaleString())
            console.log(str);
        }
        console.log('endTime:' + new Date().toLocaleString())
    }
    //并发执行 
    async function async_main() {
        console.log('beginTime:' + new Date().toLocaleString())
        let [get_foo, get_bar] = await Promise.all([foo(), bar()]);
        console.log(new Date().toLocaleString());
        console.log(get_foo);
        console.log(get_bar);
        console.log('endTime:' + new Date().toLocaleString())
    }


    //并发执行 
    async function async_main4() {
        let docs = [foo(), bar()];
        console.log('beginTime:' + new Date().toLocaleString())
        for (let doc of docs) {
            var str = await doc;
            console.log(new Date().toLocaleString())
            console.log(str);
        }
        console.log('endTime:' + new Date().toLocaleString())

    }


    //并发执行
    async function async_main2() {
        console.log('beginTime:' + new Date().toLocaleString())
        let fooPromise = foo();
        let barPromise = bar();
        let get_foo = await fooPromise;
        console.log(new Date().toLocaleString());
        console.log(get_foo);
        let get_bar = await barPromise;
        console.log(new Date().toLocaleString());
        console.log(get_bar);
        console.log('endTime:' + new Date().toLocaleString())
    }

    //并发执行 但是 会先执行 endTime
    async function async_main3() {
        let docs = [foo, bar];
        console.log('beginTime:' + new Date().toLocaleString())
        docs.forEach(async (val) => {
            var str = await val();
            console.log(new Date().toLocaleString())
            console.log(str);
        })
        console.log('endTime:' + new Date().toLocaleString())
    }


/*************************************************************************************************/
14.几道看输出的题目，考察变量声明提升，暂时性死区，原型链

/*************************************************************************************************/
15.显示器刷新率与浏览器帧率

/*************************************************************************************************/
16.requestanimationframe setTimeout区别(https://www.cnblogs.com/codejoker/p/10503251.html)
    requestanimationframe
        1间隔时间不精确，可能被阻塞。计时器的间隔指的是将回调函数推入任务队列的间隔时间，任务队列中的任务只有在主线程任务执行完毕后才会被执行。
        2计时器动画的间隔时间如果设定过短就会出现过度渲染占用大量资源，如果设定过长就会影响动画的流畅度。只能够估计合适的时间间隔。
        3多数浏览器对于计时器动画没有优化
    setTimeout
        requestAnimationFrame 动画的帧数是由系统根据当前页面是否可见，CPU 的占用情况等等来决定的，可以最大化地利用系统性能。
        浏览器对 requestAnimationFrame 动画进行了优化。

/*************************************************************************************************/
17.js单线程,异步,同步概念(https://www.cnblogs.com/sunmarvell/p/9564815.html)(https://www.cnblogs.com/hity-tt/p/6733062.html)(https://blog.csdn.net/RedaTao/article/details/81504532)
    js单线程:js是单线程的(如果一个线程删除dom,一个线程增加dom,浏览器会傻逼.所以只能单着了),虽然webWorker的多线程出现,但也是在主线程的控制下
            webWorker仅仅能进行计算任务,不能操作dom,所以本质上还是单线程
            单线程即任务是串行的,后一个任务需要等前一个任务执行,这可能出现长时间等待,
    异步:但由于类似ajax网络请求,setTimeout时间延长,dom事件的用户交互等,这些任务并不消耗cpu,是一种空等,资源浪费,因此出现了异步,通过将任务交给相应的异步模块去处理,主线程效率大大提升，当异步处理完成,
            主线程空闲时,主线程读取相应的callback,进行后续的操作,最大程度利用cpu
    总结:因此出现了同步执行和异步执行,同步执行时主线程按照顺序,串行执行任务,异步执行就是cpu跳过等待,先处理后续的任务.由此产生了任务队列与事件循环,来协调主线程与异步模块之间的工作

    文字描述
        1同步和异步任务分别进入不同的执行"场所",同步的进入主线程,异步的进入Event Table并注册函数(回调函数)
        2当指定的事情完成时,Event Table会将这个函数移入Event Queue
        3主线程内的任务执行完毕为空,会去Event Queue读取对应的函数,进入主线程执行
        4上述过程会不断重复,也就是常说的Event Loop(事件循环)
    js主线程:js一直在做这一个工作,就是从任务队列里提取任务,放到主线程里执行
            1所有同步任务都在主线程上执行,形成一个执行栈
            2主线程之外,还存在一个"任务队列"。只要异步任务有了运行结果,就在"任务队列"之中放置一个事件
            3一旦"执行栈"中的所有同步任务执行完毕,系统就会读取"任务队列",看看有哪些事件,哪些对应的异步任务,于是结束等待状态,进入执行栈,开始执行
            4主线程不断重复上面的第三部
    异步任务:有分为宏任务和微任务(异步任务里面先执行微任务,在执行宏任务)
        宏任务: 宏任务一般包括：整体代码script，setTimeout，setInterval
        微任务:Promise，process.nextTick

    Js任务广义上有同步任务和异步任务，但是js单线程还可以把任务细分为宏任务和微任务。Js单线程中的任务分为同步任务和异步任务，同步任务会在调用栈中
    按照顺序排队等待主线程任务执行异步任务则会在异步有了结果以后，将注册的回调函数添加到任务队列中，等到主线程空闲的时候，也就是栈内被清空。这个时候就会去任务队列中，按照顺序读取一个任务到栈中执行。每一次栈内清空都会读
    取任务队列，有去读，就会执行，于是形成事件循环

/*************************************************************************************************/
18浏览器是否会发送图片请求？元素隐藏display:none,class不存在的元素背景图片(https://blog.csdn.net/clear_love8/article/details/97632574)
    1. 隐藏图片
        <img src="haorooms.jpg" style="display: none" />  
        结论：只有Opera不产生请求。 注意：用visibility: hidden隐藏图片时，在Opera下也会产生请求。
    2. 重复图片
        <img src="haorooms.jpg" />  
        <img src="haorooms.jpg" />  
        结论：所有浏览器都只产生一次请求 。
    3. 重复背景
        <style type="text/css">   
        .test1 { background: url(haorooms.jpg) }   
        .test2 { background: url(haorooms.jpg) }   
        </style>   
        <div class="test1">test1</div>   
        <div class="test2">test2</div> 
        结论：所有浏览器都只产生一次请求
    4. 不存在的元素的背景
        <style type="text/css">   
        .test1 { background: url(haorooms.jpg) }   
        .test2 { background: url(http2.jpg) } /* 页面中没有class为test2的元素 */  
        </style>   
        <div class="test1">test1</div>  
        结论：背景仅在应用的元素在页面中存在时，才会产生请求。这对CSS框架来说，很有意义。
    5.隐藏元素的背景
        <style type="text/css">   
        .test1 { background: url(haorooms.jpg); display: none; }   
        .test2 { background: url(http2.jpg); visibility: hidden; }   
        </style>   
        <div class="test1">test1</div> 
        结论：Opera和Firefox对于用display: none隐藏的元素背景，不会产生HTTP请求。仅当这些元素非display: none时，才会请求背景图片。
    6.多重背景
        <style type="text/css">   
        .test1 { background: url(haorooms.jpg); }   
        .test1 { background: url(http2.jpg); }   
        </style>   
        <div class="test1">test1</div>  
        上面这段代码的http请求，只会请求http2.jpg这一张图片，原因是test1的class把上面的给覆盖掉了，所有只请求后面的一张图片！
    假如用css3多张背景图片的写法：
        <style type="text/css">   
        .test1 { background-image:url("haorooms.jpg"),url("http2.jpg"); }   
        </style>   
        <div class="test1">test1</div> 
        webkit引擎浏览器对背景图都请求，是因为支持CSS3中的多背景图。
/*************************************************************************************************/
19.==和===操作符区别
    1.==会进行强制类型转换(!=也会)
    2.在转换不同的数据类型时,相等和不相等操作符遵循下列基本规则
        1.如果一个操作符是布尔值,则比较相等性之前先将其转换为数值false转换为0,而true转换为1
        2.如果一个操作符数字符串,另一个操作符是数值,在比较相等性之前,先将字符串转为数值
        3.如果一个操作数是对象，另一个操作数不是，则调用对象的 valueOf()方法，用得到的基本类型值按照前面的规则进行比较; 这两个操作符在进行比较时则要遵循下列规则
        4.null 和 undefined 是相等的
    
/*************************************************************************************************/
20.vue生命周期做了什么(https://www.cnblogs.com/wwhhq/p/8306420.html)
    beforeCreated:
        初始化了vue的空实例,data和method中的数据都未初始化(此时无法访问到el属性和data属性)
    created
        这时候data和method都初始化好了,所以最早调用method中的方法,可以写在created中(属性已绑定,但dom还未生成$el属性还不存在)
    beforeMount
        这时候vue中的指令进行执行最终生成编译好的字符串模板并寄存在了虚拟的dom中,并没有真正生成到页面上(模板编译/挂载之前)
    mounted
        将在上一个阶段编写好存在内存中的虚拟dom真正挂载到了页面上,这是实例就已经完成创建好了(模板编译/挂载之后)
    beforeUpdate
        console.log(this.$el.innerHTML)组件更新之前,此时,元素的真实dom内容还未改变
    updated
        组件更新之后
        console.log(this.$el.innerHTML)组件更新之前,此时,元素的真实dom内容已经改变
    beforeDestroy
        组件销毁之前
        console.log(this.$el) console.log(this.message) 都还存在
    destroy
        组件销毁之后
            实例销毁后虽然dom和属性方法都还存在,但改变他们都不再生效
/*************************************************************************************************/
21.vue组件render跟template对比(https://www.cnblogs.com/liqiang666/p/12175465.html)
    使用render函数没有编译过程,相当于使用者直接将代码给程序
    Vue.component('anchored-heading', {
        render:function(createElement){
            return createElement(
                    'h' + this.level, // tag name标签名称
                    this.$slots.default // 子组件中的阵列
                )
        },
        props: {
            level:{
                type:Number,
                required:true
            }
        }
    })

/*************************************************************************************************/
22.vue实例 property API使用方式

/*************************************************************************************************/
23.浏览器的渲染机制(https://segmentfault.com/a/1190000018130499)
    渲染机制
        1.HTML解析文件,生成DOM Tree,解析css文件生成CSSOM Tree
        2.将Dom Tree和CssOM Tree结合,生成Render Tree渲染树
        3.根据Render Tree渲染机制,将像素渲染到屏幕上
    流程
        1.dom解析和css解析是两个并行的进程,所以这也解释了为什么css加载不会阻塞dom的解析
        2.然后,由于Render Tree是依赖于Dom tree和CssOm tree的,所以他必须等待到tree和CssOm Tree构建完成
          也就是css资源加载完成或者失败后才开始渲染.因此,css加载css加载是会阻塞dom的渲染的
        3.由于js可能会操作之前的dom节点和css样式,因此浏览器会维持html中css和js的顺序,因此,样式表会在后面js执行前
          先加载执行完毕,所以css会阻塞后面js的执行 

/*************************************************************************************************/
24.DOMContentLoaded和onload的区别(https://segmentfault.com/a/1190000018130499)
    DOMContentLoaded:
        当前页面内容解析完成(并不是渲染完成)后,则触发该事件
            1.如果页面中同时存在css和js,并且js在css后面,则DOMContentLoaded事件会在css加载完成后才执行
            2.其他情况下DOMContentLoaded都不会等待css加载,并且DOMContentLoaded事件也不会等待图片,视频等其他资源加载
    onLoad:
        等待页面上所有资源都加载完成才会触发,这些资源包括css,js,图片视频等 

/*************************************************************************************************/
25.谈一下flex布局
    flex是一种弹性布局,包括flex-container和flex-itme;
    常用的属性包括flex-direction,flex-warp, justify-content,align-items
    水平居中justify-content:center水平两头居中justify-content:space-between垂直居中align-items:center

/*************************************************************************************************/
26.v-if/v-show/v-html的原理
    v-if会调用addIfCondition方法

/*************************************************************************************************/
27.Promise构造函数是同步执行还是异步执行,那么then方法呢
    const promise = new Promise((resolve, reject) => {
        console.log(1)
        resolve()
        console.log(2)
    })

    promise.then(() => {
        console.log(3)
    })
    console.log(4)
    // 1243
    promise构造函数是同步执行的,then方法是异步执行的

/*************************************************************************************************/
28.let、const变量不在window上
    let a = '1';
    let b = '2';
    var c = '3'
    window.a // undefined
    window.b // undefined
    window.c // '3'
    let const 生成了块级作用域
/*************************************************************************************************/
29.简述vue中diff算法原理
    1.先比较同级
    2.先判断一方有儿子一方没有儿子的情况
    3.比较都有儿子的情况
    4.递归比较子节点
/*************************************************************************************************/
30.双指针算法

/*************************************************************************************************/
31.flex:0 1 auto 解释

/*************************************************************************************************/
32.typescript里面type和interface的区别
    interface一般用于对对象的接口做类型判断,基础类型一般不用
    type可以声明基本类型别名，联合类型，元组等类型 type 语句中还可以使用 typeof 获取实例的 类型进行赋值
/*************************************************************************************************/
33.react优化

/*************************************************************************************************/
34.用es5实现私有变量
    var person = (function(){
        var age = 1;
        return {
            name:'1223',
            getAge:function(){
                return age;
            },
            setAge:function(){
                age++
            }
        }
    })()
/*************************************************************************************************/
35.定时器为什么说时间不准确
    因为定时器只是到了指定时间将事件放入到任务队列中，必须要等到同步任务和现有任务执行完成以后

/*************************************************************************************************/
36.service worke的理解
    生命周期
    不能操作dom等

/*************************************************************************************************/
37.纯函数的好处
    概念:
        纯函数是这样一种函数，即相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用。
    例子:
        // 不纯的
        var minimum = 21;

        var checkAge = function(age) {
        return age >= minimum;
        };


        // 纯的
        var checkAge = function(age) {
        var minimum = 21;
        return age >= minimum;
        };
    追求“纯”的理由
        可缓存性（Cacheable）
        可移植性／自文档化（Portable / Self-Documenting）
        ...

/*************************************************************************************************/
1.栈溢出
    尾递归会造成栈溢出
2.事件循环
3.怎么设计UI库
    
4.怎么设计算法

/*************************************************************************************************/
38.如何比较对象相等
    递归遍历对象比较值是否相等

/*************************************************************************************************/
39.get和post区别
    (1) get请求的数据会附加在url之 ，以 " ？ "分割url和传输数据，多个参数用 "&"连接，而post请求会把请求的数据放在http请求体中
    (2) get参数有长度限制（受限于url长度，具体的数值取决于浏览器和服务器的限制，最长2048字节），而post无限制
    (3) get是明文传输，post是放在请求体中
    (4) get请求会保存在浏览器历史记录中，还可能保存在web服务器的日志中
    真相(重点)
        首先get和post在本质上都是tcp链接，但由于http协议和浏览器或者服务器的限制，从而使它们在应用过程中产生了差别
        较大的区别：简单的说，get产生个TCP数据包，post产生两个TCP数据包
        get在请求时发送一个数据包，会将header和data一起发送过去，而post会产生两个数据包先发送header，服务器返回100，然后在发送data，服务器返回200

