export function set(target: Array<any> | Object, key:any,val:any):any{
    // target 为数组
    if (Array.isArray(target) && isValidArrayIndex(key)) {
        // 修改数组的长度,避免索引>数组长度导致splice()执行有误
        target.length = Math.max(target.length, key)
        // 利用数组的splice变异方法触发响应式
        target.splice(key, 1, val)
        return val;
    }
    // target为对象,key在target或者target.prototype上,且必须不能在Object.prototype上,直接赋值
    if (key in target && !(key in Object.prototype)) {
        target[key] = val;
        return val;
    }
    // 以上都不成立,即开始给target创建一个全新的属性 获取Observer实例
    const ob = (target:any).__ob__;
    // target本身就不是响应式数据,直接赋值
    if (!ob) {
        target[key] = val;
        return val;
    }
    // 进行响应式处理
    defineReactive(ob.value, key, val);
    ob.dep.notify();
    return val;
}