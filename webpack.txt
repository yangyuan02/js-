/*************************************************************************************************/
1.使用webpack如何做按需加载
    webpack1.x中提供了require.ensure()
        required.ensure([],function(){
            required('b')
        })
        webpack在编译时,会静态地解析代码中的require.ensure(),同时将[模块b],添加到一个分开的chunk中。
        这个新的chunk会被webpack通过jsonp来按需加载
    webpack2.x中提供了import()
        import('./myModule.js').then(myModule => {
            console.log(myModule.default)
        })

/*************************************************************************************************/
2.filename和chunkFilename的区别
    output.filename决定了每个入口(entry)输出bundle的名称
    output.chunkFilename决定了非入口(not-entry)chunk文件的名称
    常用的webpack配置如下
        module.exports = {
            output:{
                filename: '[name].[hash].bundle.js',
                chunkFilename: '[name].[hash].chunk.js'
            }
        }

/*************************************************************************************************/
3.怎样调试本地npm包
    npm link的使用方式
        1.项目和模块在同一个目录下,可以使用相对路径
            npm link ../module
        2.项目和模块不在同一个目录下
            cd到模块目录, npm link,进行全局link
            cd到项目目录, npm link 模块名(package.json中的name)
        3.解除link
            解除项目和模块link,项目目录下,npm unlink 模块名
            解除模块全局link,模块目录下 npm  unlink 模块名

/*************************************************************************************************/
4.webpack原理(https://segmentfault.com/a/1190000015088834?utm_source=tag-newest)
    基本概念
        Entry:入口,webpack执行构建的第一步将从Entry开始,可抽象成输入
        Module:模块,在webpack里一切皆模块,一个模块对应着一个文件,webpack会从配置Entry开始递归找出所以依赖
        Chunk:代码块,一个Chunk由多个模块组合而成,用于代码合并与分割
        Loader:模块转换器,用于把模块原内容按照需求转换成新内容
        Plugin:扩展插件,在webpack构建流程中的特定时机会广播出对应的事件插件可以监听这些事件的发生,在特定时机做对应的事情
    流程概况
        webpack的运行是一个串行的过程,从启动到结束会依次执行以下流程
            1.初始化参数:从配置文件和Shell语句中读取与合并参数,得出最终的参数
            2.开始编译:用上一步的得到的参数初始化Compiler对象,加载所以配置的插件,执行对象的run方法开始执行编译
            3.确定入口:根据配置中的Entry找出所有入口文件
            4.编译模块:从入口文件出发,调用所有配置的Loader对模块进行翻译,再找出模块依赖的模块,在递归本步骤知道所有入口文件依赖
            5.完成模块编译:在经过第4步使用Loader翻译完成所有的模块后,得到了每个模块被翻译后最终的内容以及他们之前的依赖关系
            6.输出资源:根据入口和模块之间的依赖关系,组装成一个个包含多个模块的chunk,再把每个chunk转成一个单独的文件加入到输出列表
            7.输出完成:在确定好输出内容后,根据配置确定输出路径和文件名，吧文件内容写入到文件系统
        以上过程中,webpack会在特定的时间点广播特定的事件,插件在监听到感兴趣的事件后会执行特定的逻辑,并且插件可以调用webpack提供api改变webpack运行结果
        流程细节
            初始化：启动构建，读取与合并配置参数，加载 Plugin，实例化 Compiler。
            编译：从 Entry 发出，针对每个 Module 串行调用对应的 Loader 去翻译文件内容，再找到该 Module 依赖的 Module，递归地进行编译处理。
            输出：对编译后的 Module 组合成 Chunk，把 Chunk 转换成文件，输出到文件系统

/*************************************************************************************************/
5.Tree Shaking的使用和原理分析(https://jkfhto.github.io/2019-10-17/webpack/Tree-Shaking%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/)
    概念:1个模块可能有很多个方法,只要其中的某个方法使用到了,则整个文件都会被打到bundle里面去,tree shaking就只把用到的
        方法导入到bundle,没用到的方法会在uglify阶段被擦除掉
    使用:webpack默认支持,在.babelrc里设置module:false即可
        production mode的情况下默认开启
    要求:必须是es6语法,CommonJs方式不开启
        需要tree shaking的模块代码是没有副作用的,否则tree shaking会失效
    原理:
        利用es6模块的特点
            只能作为模块顶层语句出现
            import的模块名只能是字符串常量,不能动态引入模块
            import binding是immutable的,引入模块不能再进行修改
        代码擦除:uglify删除无用代码

/*************************************************************************************************/
6.Webpack 热更新原理
