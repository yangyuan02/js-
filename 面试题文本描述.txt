/*************************************************************************************************/
1.new 操作符具体做了什么？
var Fn = function() {}
var fnObj = new Fn();

1创建一个空对象
var obj = new Object();
2设置原型链
obj._proto_ = Fn.prototype;
3让Fn的this指向obj,并执行Fn的函数体
var result = fn.call(obj)
4判断Fn的返回值类型,如果是值类型,返回obj,如果是引用类型,就返回这个引用类型的对象
if(typeof result === 'object) {
    fnObj = result;
} else {
    fnObj = obj;
}

/*************************************************************************************************/
2.原型链,原型,构造函数之间的关系总结
Function Person {}
const p1=new Person()
p1.prototype是undefined
实例p1上面是没有prototype而是通过__proto__访问到Person.prototype

p1.construct=Person
p1.__proto__=Person.prototype
Person.prototype.__proto__=Object.prototype
Object.prototype.__proto__=null

一切底层对象上的原型的原型链等于对象的原型
Function.prototype__proto__=Object.prototype
Array.prototype__proto__=Object.prototype

一切底层对象原型链等于函数的原型
Object.__proto__=Function.prototype
Array.__proto__=Function.prototype

一切底层对象上的构造函数等于构造器函数，
对象上构造器来自Function
Array.construct=Function
String.construct=Function
Object.construct=Function
cons arr=[1,2]
art.construct = Array

一切对象上原型的构造函数等于自己本身
Array.prototype.construct=Array
Object.prototype.construct=Object

/*************************************************************************************************/
3.浏览器的解析过程
1输入地址
2浏览器查找域名的ip地址
    首先查看本地的hosts文件->本地的dns服务器->域服务器,查找到对应的ip地址,并且缓存
3浏览器向web服务器发送一个http请求
    三次握手建立连接
4建立连接之后
    会相应一些状态码200,304,500根据状态码做对应的处理
5拿到数据后
    首先解析html，构建dom树->构建render->树布局render->树绘制render树

    解析过程中,浏览器首先会解析html文件构建dom树，然后解析css文件构建的渲染树，等到渲染树构建完成
    浏览器开始布局渲染树并将绘制到屏幕上

    浏览器自上而下执行,过程中如遇到css,img等,请求是异步的

    当文档加载过程中遇到js文件,html文档会挂起来渲染的线程,不仅要等待文档中js文件加载完毕，还有等待
    解析执行完毕,才可以恢复html文档渲染线程,因为js有可能修改dom,所以在编写代码尽可能吧js写在底部
    等html主体和css加载完之后在进行加载js

/*************************************************************************************************/
4.什么是回流，什么是重绘，有什么区别?
当render tree中的一部分因为元素规模尺寸,布局,隐藏等改变而需要重新构建,这就称为----回流
    (添加或者删除可见的DOM元素，元素位置改变，元素尺寸改变——边距、填充、边框、宽度和高度，内容改变---回流)

当render tree中的一些元素需要更新属性,而这些属性只是影响外观,风格,比如background-color称之为----重绘

区别
    回流必将引起重绘,而重绘不一定引起回流
优化
    比如改变样式的时候，不去改变他们每个的样式，而是直接改变className

/*************************************************************************************************/


